package hrs.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import hrs.models.User;
import hrs.models.UserRepository;

//@CrossOrigin(origins = "*", maxAge = 3600)
//@CrossOrigin
@RestController							// This means that this class is a controller (= @Controller + @Responsebody) 
@RequestMapping(path="/pub")			// This means URL's start with /demo (after Application path, e.g. http://localhost:8080/demo/...), also @RequestMapping("/demo")
//@RequestMapping(path="/greeting", method=RequestMethod.GET)  // +import org.springframework.web.bind.annotation.RequestMethod;
public class UserController {

	@Autowired							// This means to get the bean called userRepository. Which is auto-generated by Spring, we'll use it to handle the data 
	private UserRepository userRepository; 
	
	@RequestMapping("*")			
	public @ResponseBody String _404NotFound() {
		return "Error 404: The requested resource is NOT found ... (c)1972 BellLabs";
	}
	
	// @ResponseBody means the returned String is the response, not a view name
	// @RequestParam means it is a param from the GET or POST req
	@GetMapping(path="/add")			// Map ONLY GET Requests, shorthand for @RequestMapping(method=GET) 	
	public @ResponseBody String addNewUser (
			  @RequestParam(defaultValue="visitor") String role // this creates optional URL param with set default (here "") 
			, @RequestParam String ssn
			, @RequestParam(value="fname", defaultValue="") String firstName	// maps URL param "fname" to object property "firstName"
			, @RequestParam(value="lname") String lastName						// todo: what's the difference b/n this and @RequestParam(name="id", required=false)
			, @RequestParam(defaultValue="Bulgaria") String country
			, @RequestParam String city
			, @RequestParam String address
			, @RequestParam String phone
			, @RequestParam String email
			, @RequestParam String username
			, @RequestParam String password
			, @RequestParam(defaultValue="NA") String comment
			) {		
		
		User n = new User();
		
		n.setRole(role);
		n.setSsn(ssn);
		n.setFirstName(firstName);
		n.setLastName(lastName);
		n.setCountry(country);
		n.setCity(city);
		n.setAddress(address);
		n.setPhone(phone);
		n.setEmail(email);
		n.setUsername(username);
		n.setPassword(password);
		n.setComment(comment);
		
		userRepository.save(n);
		return "Saved";
	}

	// @CrossOrigin(origins = "http://localhost:4200")	// fine-tuned CORS
	@PostMapping(path="/add")
	public @ResponseBody String addNewUserPost(@RequestBody User user) {
		
		userRepository.save(user);
		return "Saved";
	}
	
	@RequestMapping(path="/users/all", produces = MediaType.APPLICATION_JSON_VALUE)
	public @ResponseBody Iterable<User> getAllUsers() {			// returns a JSON or XML with all users
		return userRepository.findAll();
	}
	
	// @RequestMapping("/{userId}/sthelse")										// here {userId} is @PathVariable, whereas @RequestParam is 'Rocky' in ../bookmarks?name=Rocky
	@GetMapping(path="/user")
	public @ResponseBody User getSpecificUser(@RequestParam String uid) {		// returnType myFuncDoSth(@PathVariable String userId) {...}, also test mapping @RequestParam(value="uid")
		return userRepository.findOne(Long.parseLong(uid));
	}
	
	
	
	
	
	
	
}

/* Test case (in Postman or Browser):
* localhost:8080/demo/add?name=Ivo&email=igpeev@yahoo.com   => should return 'Saved'
* localhost:8080/demo/all 									 => should return a list of all saved entities
* 
* */





